version: "3.8"

services:
  mongo:
    image: mongo:7
    volumes:
      - mongo-data:/data/db
    secrets:
      - mongo_root_password
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:alpine
    volumes:
      - redis-data:/data
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - web
      - api
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost || exit 1"]
      interval: 30s
      timeout: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  web:
    build: ./web
    depends_on:
      - api
    networks:
      - app-net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  api:
    build: ./api
    environment:
      - PORT=5000
    depends_on:
      - mongo
      - redis
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

secrets:
  mongo_root_password:
    file: ./secrets/mongo-root-password.txt

volumes:
  mongo-data:
  redis-data:

networks:
  app-net:

  # Health Check
  # Health checks ensure Docker knows whether a container is healthy and ready to serve traffic.
  # Useful for orchestration, restarts, and load balancing
